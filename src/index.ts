import cron from 'node-cron';
import ping from 'ping';
import dns from 'dns';
import notifier from 'node-notifier';
import {parseCronExpression} from 'cron-schedule';
import {exec} from 'child_process'; // –ò–º–ø–æ—Ä—Ç–∏—Ä—É–µ–º exec –¥–ª—è –≤—ã–ø–æ–ª–Ω–µ–Ω–∏—è –∫–æ–º–∞–Ω–¥

// –ó–Ω–∞—á–µ–Ω–∏—è –ø–æ —É–º–æ–ª—á–∞–Ω–∏—é
const DEFAULT_HOSTS = '8.8.8.8,1.1.1.1,example.com';
const DEFAULT_SCHEDULE = '*/5 * * * * *';

// –§–ª–∞–≥ –¥–ª—è —Ç–∏—Ö–æ–≥–æ —Ä–µ–∂–∏–º–∞ –∏ –æ—Ç–∫–ª—é—á–µ–Ω–∏—è —É–≤–µ–¥–æ–º–ª–µ–Ω–∏–π
let isQuietMode = false;
let disableNotifications = false;

// –•—Ä–∞–Ω–µ–Ω–∏–µ —Å–æ—Å—Ç–æ—è–Ω–∏—è —Ö–æ—Å—Ç–æ–≤
const hostStatus: { [key: string]: { ping: boolean; dns: boolean } } = {};
let lastInternetStatus: 'up' | 'down' | 'dnsIssue' = 'up';
let lastErrorHost: string | null = null;

// –ù–æ–≤—ã–µ –∞—Ä–≥—É–º–µ–Ω—Ç—ã –¥–ª—è –∫–æ–º–∞–Ω–¥
let commandOnUp: string | null = null;
let commandOnDown: string | null = null;
let commandOnDnsIssue: string | null = null;

// –§—É–Ω–∫—Ü–∏—è –¥–ª—è –ø—Ä–æ–≤–µ—Ä–∫–∏ —Å–æ–µ–¥–∏–Ω–µ–Ω–∏—è
async function checkConnection(hosts: string[], timeout: number): Promise<void> {
    let allHostsReachable = true;
    let allHostsDnsReachable = true;

    const timeoutPromise = new Promise<void>((_, reject) => {
        setTimeout(() => {
            reject(new Error('Check connection timed out'));
        }, timeout);
    });

    const checkPromises = hosts.map(async (host) => {
        try {
            // –ü—Ä–æ–≤–µ—Ä–∫–∞ ping
            const res = await ping.promise.probe(host);
            hostStatus[host] = {ping: res.alive, dns: false}; // –ò–∑–Ω–∞—á–∞–ª—å–Ω–æ DNS —Å—Ç–∞—Ç—É—Å –Ω–µ –ø—Ä–æ–≤–µ—Ä–µ–Ω

            if (!res.alive) {
                allHostsReachable = false; // –ï—Å–ª–∏ —Ö–æ—Ç—è –±—ã –æ–¥–∏–Ω —Ö–æ—Å—Ç –Ω–µ–¥–æ—Å—Ç—É–ø–µ–Ω –ø–æ ping
            }

            // –ü—Ä–æ–≤–µ—Ä–∫–∞ DNS
            await new Promise<void>((resolve, reject) => {
                dns.lookup(host, (err) => {
                    if (err) {
                        hostStatus[host].dns = false; // DNS –Ω–µ–¥–æ—Å—Ç—É–ø–µ–Ω
                        allHostsDnsReachable = false; // –ï—Å–ª–∏ —Ö–æ—Ç—è –±—ã –æ–¥–∏–Ω —Ö–æ—Å—Ç –Ω–µ–¥–æ—Å—Ç—É–ø–µ–Ω –ø–æ DNS
                        reject(err);
                    } else {
                        hostStatus[host].dns = true; // DNS –¥–æ—Å—Ç—É–ø–µ–Ω
                        resolve();
                    }
                });
            });
        } catch (error) {
            if (!isQuietMode) {
                console.error(`Error checking host ${host}: ${(error as Error).message}`);
            }
            lastErrorHost = host; // –ó–∞–ø–æ–º–∏–Ω–∞–µ–º –ø–æ—Å–ª–µ–¥–Ω–∏–π —Ö–æ—Å—Ç —Å –æ—à–∏–±–∫–æ–π
        }
    });

    try {
        await Promise.race([Promise.all(checkPromises), timeoutPromise]);
    } catch (error) {
        if (error instanceof Error && error.message === 'Check connection timed out') {
            allHostsReachable = false; // –ï—Å–ª–∏ —Ç–∞–π–º–∞—É—Ç, —Å—á–∏—Ç–∞–µ–º, —á—Ç–æ –∏–Ω—Ç–µ—Ä–Ω–µ—Ç –Ω–µ–¥–æ—Å—Ç—É–ø–µ–Ω
        }
    }

    // –£–≤–µ–¥–æ–º–ª–µ–Ω–∏—è –≤ –∑–∞–≤–∏—Å–∏–º–æ—Å—Ç–∏ –æ—Ç —Å–æ—Å—Ç–æ—è–Ω–∏—è
    if (!allHostsReachable) {
        if (lastInternetStatus !== 'down') {
            notifyUser(`‚ùå Internet is down! All hosts are unreachable.`);
            lastInternetStatus = 'down';
            executeCommand(commandOnDown); // –í—ã–ø–æ–ª–Ω—è–µ–º –∫–æ–º–∞–Ω–¥—É –ø—Ä–∏ —Å—Ç–∞—Ç—É—Å–µ down
        }
    } else if (lastErrorHost) {
        if (lastInternetStatus !== 'dnsIssue') {
            notifyUser(`üîç Error checking host ${lastErrorHost}.`);
            lastInternetStatus = 'dnsIssue';
            executeCommand(commandOnDnsIssue); // –í—ã–ø–æ–ª–Ω—è–µ–º –∫–æ–º–∞–Ω–¥—É –ø—Ä–∏ —Å—Ç–∞—Ç—É—Å–µ dnsIssue
        }
    } else {
        if (lastInternetStatus !== 'up') {
            notifyUser(`‚úÖ Internet is working! All hosts are reachable.`);
            lastInternetStatus = 'up';
            executeCommand(commandOnUp); // –í—ã–ø–æ–ª–Ω—è–µ–º –∫–æ–º–∞–Ω–¥—É –ø—Ä–∏ —Å—Ç–∞—Ç—É—Å–µ up
        }
        if (!isQuietMode) {
            console.log(`‚úÖ Internet is working! All hosts are reachable.`);
        }
    }
}

// –§—É–Ω–∫—Ü–∏—è –¥–ª—è –æ—Ç–ø—Ä–∞–≤–∫–∏ —É–≤–µ–¥–æ–º–ª–µ–Ω–∏–π
function notifyUser(message: string): void {
    if (!disableNotifications) { // –ü—Ä–æ–≤–µ—Ä—è–µ–º, –æ—Ç–∫–ª—é—á–µ–Ω—ã –ª–∏ —É–≤–µ–¥–æ–º–ª–µ–Ω–∏—è
        notifier.notify({
            title: 'Network Monitor',
            message: message,
            sound: true, // –í–∫–ª—é—á–∏—Ç—å –∑–≤—É–∫ —É–≤–µ–¥–æ–º–ª–µ–Ω–∏—è
        });
    }
}

// –§—É–Ω–∫—Ü–∏—è –¥–ª—è –≤—ã–ø–æ–ª–Ω–µ–Ω–∏—è –∫–æ–º–∞–Ω–¥
function executeCommand(command: string | null): void {
    if (command) {
        exec(command, (error, stdout, stderr) => {
            if (error) {
                console.error(`Error executing command: ${error.message}`);
                return;
            }
            if (stderr) {
                console.error(`Command stderr: ${stderr}`);
                return;
            }
            if (!isQuietMode) {
                console.log(`Command output: ${stdout}`);
            }
        });
    }
}

// –§—É–Ω–∫—Ü–∏—è –¥–ª—è –≤—ã–≤–æ–¥–∞ —Å–ø—Ä–∞–≤–∫–∏
function printHelp(): void {
    console.log('Usage: NetworkMonitor [options]');
    console.log('Options:');
    console.log('  --hosts, -h <host1,host2,...>    Comma-separated list of hosts to check (default: 8.8.8.8,1.1.1.1,example.com)');
    console.log('  --schedule, -s <cron_schedule>   Cron schedule for checks (default: */5 * * * *)');
    console.log('  --quiet, -q                      Run in quiet mode (no console output)');
    console.log('  --disable-notifications          Disable notifications');
    console.log('  --on-up <command>                Command to execute when status is up');
    console.log('  --on-down <command>              Command to execute when status is down');
    console.log('  --on-dns-issue <command>         Command to execute when there is a DNS issue');
    console.log('  --help, -h                       Show this help message');
}

// –ü–æ–ª—É—á–µ–Ω–∏–µ –∞—Ä–≥—É–º–µ–Ω—Ç–æ–≤ –∫–æ–º–∞–Ω–¥–Ω–æ–π —Å—Ç—Ä–æ–∫–∏
const args = process.argv.slice(2);
let hostsArg = DEFAULT_HOSTS;
let scheduleArg = DEFAULT_SCHEDULE;

// –û–±—Ä–∞–±–æ—Ç–∫–∞ –∞—Ä–≥—É–º–µ–Ω—Ç–æ–≤
for (let i = 0; i < args.length; i++) {
    if (args[i] === '--help' || args[i] === '-h') {
        printHelp();
        process.exit(0);
    } else if (args[i] === '--hosts' || args[i] === '-h') {
        hostsArg = args[++i] || DEFAULT_HOSTS; // –ü–æ–ª—É—á–∞–µ–º —Å–ª–µ–¥—É—é—â–∏–π –∞—Ä–≥—É–º–µ–Ω—Ç
    } else if (args[i] === '--schedule' || args[i] === '-s') {
        scheduleArg = args[++i] || DEFAULT_SCHEDULE; // –ü–æ–ª—É—á–∞–µ–º —Å–ª–µ–¥—É—é—â–∏–π –∞—Ä–≥—É–º–µ–Ω—Ç
    } else if (args[i] === '--quiet' || args[i] === '-q') {
        isQuietMode = true; // –í–∫–ª—é—á–∞–µ–º —Ç–∏—Ö–∏–π —Ä–µ–∂–∏–º
    } else if (args[i] === '--disable-notifications') {
        disableNotifications = true; // –û—Ç–∫–ª—é—á–∞–µ–º —É–≤–µ–¥–æ–º–ª–µ–Ω–∏—è
    } else if (args[i] === '--on-up') {
        commandOnUp = args[++i] || null; // –ü–æ–ª—É—á–∞–µ–º –∫–æ–º–∞–Ω–¥—É –¥–ª—è —Å—Ç–∞—Ç—É—Å–∞ up
    } else if (args[i] === '--on-down') {
        commandOnDown = args[++i] || null; // –ü–æ–ª—É—á–∞–µ–º –∫–æ–º–∞–Ω–¥—É –¥–ª—è —Å—Ç–∞—Ç—É—Å–∞ down
    } else if (args[i] === '--on-dns-issue') {
        commandOnDnsIssue = args[++i] || null; // –ü–æ–ª—É—á–∞–µ–º –∫–æ–º–∞–Ω–¥—É –¥–ª—è —Å—Ç–∞—Ç—É—Å–∞ dnsIssue
    }
}

// –ü—Ä–µ–æ–±—Ä–∞–∑–æ–≤–∞–Ω–∏–µ –∞—Ä–≥—É–º–µ–Ω—Ç–∞ hosts –≤ –º–∞—Å—Å–∏–≤
const hosts = hostsArg.split(',').map(host => host.trim());

// –ó–∞–ø–ª–∞–Ω–∏—Ä–æ–≤–∞—Ç—å –≤—ã–ø–æ–ª–Ω–µ–Ω–∏–µ –∑–∞–¥–∞—á–∏ –ø–æ —É–∫–∞–∑–∞–Ω–Ω–æ–º—É —Ä–∞—Å–ø–∏—Å–∞–Ω–∏—é
cron.schedule(scheduleArg, () => {
    const taskDelay = parseCronExpression(scheduleArg).getNextDate().getTime() - new Date().getTime();
    const timeout = Math.min(taskDelay, 10000); // –û–≥—Ä–∞–Ω–∏—á–µ–Ω–∏–µ –ø–æ –≤—Ä–µ–º–µ–Ω–∏: taskDelay –∏–ª–∏ 10 —Å–µ–∫—É–Ω–¥
    checkConnection(hosts, timeout).catch(console.error);
});

// –ó–∞–ø—É—Å–∫ –ø—Ä–æ–≤–µ—Ä–∫–∏ –ø—Ä–∏ —Å—Ç–∞—Ä—Ç–µ —Å–∫—Ä–∏–ø—Ç–∞
await checkConnection(hosts, 10000); // –ù–∞—á–∞–ª—å–Ω–∞—è –ø—Ä–æ–≤–µ—Ä–∫–∞ —Å —Ç–∞–π–º–∞—É—Ç–æ–º 10 —Å–µ–∫—É–Ω–¥
console.log('next run', parseCronExpression(scheduleArg).getNextDate());
notifyUser("üåè Starting Network Monitor");